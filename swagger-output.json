{
  "swagger": "2.0",
  "info": {
    "version": "v1",
    "title": "Unify Giving Backend API(Staging and Development)",
    "description": "API Base URL:  https://ug-backend-58bx.onrender.com"
  },
  "basePath": "/",
  "tags": [
    {
      "name": "Users"
    }
  ],
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "JWT_authentication": {
      "type": "apiKey",
      "in": "header",
      "name": "Authorization",
      "description": "For the \"Authorization\" header you must set a value of \"Bearer your_jwt_token_here\"."
    }
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v1/users/google_user/new": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Sign in google user",
        "description": "",
        "parameters": [
          {
            "name": "Request body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "example": "google_oauth_token"
                }
              },
              "required": [
                "token"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Successfully saved new user."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "...depends which error occurred..."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "An account with this email address already exists."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "An error occurred while saving the user to the database."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/v1/users/google_user/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Login a google user",
        "description": "",
        "parameters": [
          {
            "name": "Request body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "token": {
                  "type": "string",
                  "example": "google_oauth_token"
                }
              },
              "required": [
                "token"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 274
                },
                "google_id": {
                  "type": "number",
                  "example": 123
                },
                "email": {
                  "type": "string",
                  "example": "john@email.com"
                },
                "firtName": {
                  "type": "string",
                  "example": "John"
                },
                "lastName": {
                  "type": "string",
                  "example": "Doe"
                },
                "role": {
                  "type": "string",
                  "example": "donor"
                },
                "status": {
                  "type": "string",
                  "example": "active"
                },
                "city": {
                  "type": "string",
                  "example": "London"
                },
                "country": {
                  "type": "string",
                  "example": "Uk"
                },
                "picture": {
                  "type": "string",
                  "example": "/16352_1657360145439.jpg"
                },
                "charityId": {
                  "type": "number",
                  "example": 3764
                },
                "createdAt": {
                  "type": "string",
                  "example": "2023-05-22T03:27:50.527Z"
                },
                "updatedAt": {
                  "type": "string",
                  "example": "2023-05-22T03:27:50.527Z"
                },
                "token": {
                  "type": "string",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjksInJvbGUiOiJkb25vciIsInN0YXR1cyI6ImFjdGl2ZSIsImlhdCI6MTY4NDc4MzY5NiwiZXhwIjoxNjg0ODY2NDk2fQ.cQDtLE9Cm6bZvq8SlhoSt4WeTCIja-bgvfkV1t_wy8k"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "...depends which error occured..."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "An error occured when trying to get the user from the database."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/v1/users/recipient/list": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all recipient",
        "description": "To get all recipient users from DB",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully obtained.",
            "schema": {
              "type": "object",
              "properties": {
                "recipient": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": 13
                      },
                      "email": {
                        "type": "string",
                        "example": "joe@email.com"
                      },
                      "first_name": {
                        "type": "string",
                        "example": "Joe"
                      },
                      "last_name": {
                        "type": "string",
                        "example": "Doe"
                      },
                      "password": {
                        "type": "string",
                        "example": "$2a$10$gQSkm2dNaXvxrAcNbuUBlueQYBnqHqLPbPQaYEcZz9nKQAtFCwobe"
                      },
                      "agree_to_terms": {
                        "type": "boolean",
                        "example": true
                      },
                      "role": {
                        "type": "string",
                        "example": "recipient"
                      },
                      "status": {
                        "type": "string",
                        "example": "active"
                      },
                      "story": {},
                      "city": {
                        "type": "string",
                        "example": "London"
                      },
                      "country": {
                        "type": "string",
                        "example": "Uk"
                      },
                      "picture": {},
                      "qr_code": {},
                      "charity_id": {
                        "type": "number",
                        "example": 465
                      },
                      "created_at": {
                        "type": "string",
                        "example": "2023-07-16T16:04:04.033Z"
                      },
                      "updated_at": {
                        "type": "string",
                        "example": "2023-07-16T16:04:04.033Z"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Authorization header is undefined. Did you forget to add the authorization header to your request?"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Your session has expired. Please log in again."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "An error occured while searching the user profile on the database."
          }
        },
        "security": [
          {
            "JWT_authentication": []
          }
        ]
      }
    },
    "/api/v1/users/recipient/location": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Get all recipients by location",
        "description": "To get all recipient users from DB by location",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "Request body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "city": {
                  "type": "string",
                  "example": "London"
                },
                "country": {
                  "type": "string",
                  "example": "UK"
                }
              },
              "required": [
                "city",
                "country"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Recipients successfully obtained.",
            "schema": {
              "type": "object",
              "properties": {
                "recipients": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": 12
                      },
                      "email": {
                        "type": "string",
                        "example": "jack@email.com"
                      },
                      "first_name": {
                        "type": "string",
                        "example": "Jack"
                      },
                      "last_name": {
                        "type": "string",
                        "example": "Doe"
                      },
                      "role": {
                        "type": "string",
                        "example": "recipient"
                      },
                      "status": {
                        "type": "string",
                        "example": "active"
                      },
                      "city": {
                        "type": "string",
                        "example": "London"
                      },
                      "country": {
                        "type": "string",
                        "example": "UK"
                      },
                      "charity_id": {
                        "type": "number",
                        "example": 465
                      },
                      "created_at": {
                        "type": "string",
                        "example": "2023-07-16T16:03:23.641Z"
                      },
                      "updated_at": {
                        "type": "string",
                        "example": "2023-07-16T16:03:23.641Z"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Location is required."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "An error occurred while searching recipients on the database."
          }
        },
        "security": [
          {
            "JWT_authentication": []
          }
        ]
      }
    },
    "/api/v1/users/recipient/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get recipient by id",
        "description": "To get a recipient user by ID from DB",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully obtained.",
            "schema": {
              "type": "object",
              "properties": {
                "recipient": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 9
                    },
                    "email": {
                      "type": "string",
                      "example": "fakerecipient@email.com"
                    },
                    "first_name": {
                      "type": "string",
                      "example": "Fake"
                    },
                    "last_name": {
                      "type": "string",
                      "example": "Recipient"
                    },
                    "status": {
                      "type": "string",
                      "example": "active"
                    },
                    "story": {},
                    "city": {
                      "type": "string",
                      "example": "London"
                    },
                    "country": {
                      "type": "string",
                      "example": "Uk"
                    },
                    "picture": {},
                    "qr_code": {},
                    "charity_id": {
                      "type": "number",
                      "example": 3
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Authorization header is undefined. Did you forget to add the authorization header to your request?"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Your session has expired. Please log in again."
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Access denied. User is not a recipient."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "An error occurred while searching the user profile on the database."
          }
        },
        "security": [
          {
            "JWT_authentication": []
          }
        ]
      }
    },
    "/api/v1/users/recipient/transactions/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get combined donations and transactions by recipient ID",
        "description": "To fetch both donations (as income) and transactions (as expense) by recipient ID, sorted by creation date.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Combined list of donations and transactions successfully obtained.",
            "schema": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "number",
                    "example": 27
                  },
                  "donor_id": {
                    "type": "number",
                    "example": 1
                  },
                  "charity_id": {
                    "type": "number",
                    "example": 1
                  },
                  "recipient_id": {
                    "type": "number",
                    "example": 5
                  },
                  "amount_donation": {
                    "type": "string",
                    "example": "5.23"
                  },
                  "message": {
                    "type": "string",
                    "example": "11/10/2024"
                  },
                  "created_at": {
                    "type": "string",
                    "example": "2024-10-27T13:07:42.747Z"
                  },
                  "updated_at": {
                    "type": "string",
                    "example": "2024-10-27T13:07:42.747Z"
                  },
                  "payment_id": {
                    "type": "number",
                    "example": 109
                  },
                  "type": {
                    "type": "string",
                    "example": "income"
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Invalid request format or missing recipient ID.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Authorization header is undefined. Did you forget to add the authorization header to your request?"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized access due to expired session.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Your session has expired. Please log in again."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "403": {
            "description": "Access denied due to insufficient permissions.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Access denied. User is not a recipient."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Server error while retrieving data from the database.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "An error occurred while fetching combined data."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "JWT_authentication": []
          }
        ]
      }
    },
    "/api/v1/users/recipient/new": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Create new recipient",
        "description": "Endpoint to create new recipient by charity",
        "parameters": [
          {
            "name": "firstName",
            "in": "formData",
            "description": "First name of the recipient",
            "required": true,
            "type": "string",
            "example": "John"
          },
          {
            "name": "lastName",
            "in": "formData",
            "description": "Last name of the recipient",
            "required": true,
            "type": "string",
            "example": "Doe"
          },
          {
            "name": "email",
            "in": "formData",
            "description": "Email address of the recipient",
            "required": true,
            "type": "string",
            "example": "john@email.com"
          },
          {
            "name": "password",
            "in": "formData",
            "description": "Password for the recipient account",
            "required": true,
            "type": "string",
            "example": "bad12345"
          },
          {
            "name": "story",
            "in": "formData",
            "description": "Story about the recipient",
            "required": false,
            "type": "string",
            "example": "String"
          },
          {
            "name": "city",
            "in": "formData",
            "description": "City where the recipient resides",
            "required": true,
            "type": "string",
            "example": "London"
          },
          {
            "name": "country",
            "in": "formData",
            "description": "Country where the recipient resides",
            "required": true,
            "type": "string",
            "example": "UK"
          },
          {
            "name": "charity_id_recipient",
            "in": "formData",
            "description": "Charity ID associated with the recipient",
            "required": true,
            "type": "integer",
            "example": 25
          },
          {
            "name": "image",
            "description": "Image to upload or update.",
            "in": "formData",
            "required": true,
            "type": "file"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "password": {
                  "example": "any"
                },
                "charity_id_req": {
                  "example": "any"
                },
                "agreeToTerms": {
                  "example": "any"
                },
                "id": {
                  "example": "any"
                },
                "picture": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Successfully saved new recipient."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "...depends which error occurred..."
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "An account with this email address already exists."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "An error occurred while saving the user to the database."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/v1/users/recipient/update/{id}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update recipient user",
        "description": "Updates user details based on provided fields.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the user to be updated"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "Request body",
            "in": "body",
            "description": "Fields to update. Only include the fields you want to change.",
            "schema": {
              "type": "object",
              "properties": {
                "firstName": {
                  "type": "string",
                  "example": "John"
                },
                "lastName": {
                  "type": "string",
                  "example": "Doe"
                },
                "email": {
                  "type": "string",
                  "example": "john.doe@email.com"
                },
                "city": {
                  "type": "string",
                  "example": "London"
                },
                "country": {
                  "type": "string",
                  "example": "UK"
                },
                "story": {
                  "type": "string",
                  "example": "My story..."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully updated",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Successfully updated."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Invalid request or nothing to update.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Nothing to update."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Internal server error"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "JWT_authentication": []
          }
        ]
      }
    },
    "/api/v1/users/custom_user/": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Creates new user and sends verification email",
        "description": "The 'charity_id_recipient' field is only used when registering recipient users (in order to link them to their charity organization). Otherwise, you do not need to include that in the request body. The 'role' field must be one of ['donor', 'recipient', 'charity']. Use an email address you have access to, so that you can complete the registration process.",
        "parameters": [
          {
            "name": "Request body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "firstName": {
                  "type": "string",
                  "example": "John"
                },
                "lastName": {
                  "type": "string",
                  "example": "Doe"
                },
                "email": {
                  "type": "string",
                  "example": "john@email.com"
                },
                "password": {
                  "type": "string",
                  "example": "bad12345"
                },
                "agreeToTerms": {
                  "type": "boolean",
                  "example": true
                },
                "role": {
                  "type": "string",
                  "example": "donor"
                },
                "city": {
                  "type": "string",
                  "example": "London"
                },
                "country": {
                  "type": "string",
                  "example": "Uk"
                }
              },
              "required": [
                "firstName",
                "lastName",
                "email",
                "password",
                "agreeToTerms",
                "role",
                "city",
                "country"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Successfully saved new user."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "...depends which error occured..."
                }
              },
              "xml": {
                "name": "main"
              }
            },
            "description": "Bad Request"
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "An account with this email address already exists."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "An error occured while saving the user to the database."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/v1/users/custom_user/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Login a user",
        "description": "User login endpoint. Validates the provided email and password. Returns a JWT token upon successful login. The response varies depending on the user\\'s role, providing role-specific information such as user details and associated business IDs (for business users). Errors are returned for invalid credentials, inactive accounts, or conflicts with Google login.",
        "parameters": [
          {
            "name": "Request body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "john@email.com"
                },
                "password": {
                  "type": "string",
                  "example": "bad12345"
                }
              },
              "required": [
                "email",
                "password"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "number",
                  "example": 274
                },
                "email": {
                  "type": "string",
                  "example": "john@email.com"
                },
                "firtName": {
                  "type": "string",
                  "example": "John"
                },
                "lastName": {
                  "type": "string",
                  "example": "Doe"
                },
                "role": {
                  "type": "string",
                  "example": "donor"
                },
                "status": {
                  "type": "string",
                  "example": "active"
                },
                "city": {
                  "type": "string",
                  "example": "London"
                },
                "country": {
                  "type": "string",
                  "example": "London"
                },
                "balance": {
                  "type": "string",
                  "example": "120.00"
                },
                "picture": {
                  "type": "string",
                  "example": "/16352_1657360145439.jpg"
                },
                "createdAt": {
                  "type": "string",
                  "example": "2023-05-22T03:27:50.527Z"
                },
                "updatedAt": {
                  "type": "string",
                  "example": "2023-05-22T03:27:50.527Z"
                },
                "token": {
                  "type": "string",
                  "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjksInJvbGUiOiJkb25vciIsInN0YXR1cyI6ImFjdGl2ZSIsImlhdCI6MTY4NDc4MzY5NiwiZXhwIjoxNjg0ODY2NDk2fQ.cQDtLE9Cm6bZvq8SlhoSt4WeTCIja-bgvfkV1t_wy8k"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Invalid input for email address. Invalid input for password."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Password incorrect. Email incorrect."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Cannot log in to that account. The account status is: inactive."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "This email is associated with a Google login. Use Google login to access your account."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "A database error occurred. Please try again later."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/v1/users/custom_user/update/{id}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user",
        "description": "Updates user details based on provided fields.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "ID of the user to be updated"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "Request body",
            "in": "body",
            "description": "Fields to update. Only include the fields you want to change.",
            "schema": {
              "type": "object",
              "properties": {
                "firstName": {
                  "type": "string",
                  "example": "John"
                },
                "lastName": {
                  "type": "string",
                  "example": "Doe"
                },
                "email": {
                  "type": "string",
                  "example": "john.doe@email.com"
                },
                "city": {
                  "type": "string",
                  "example": "London"
                },
                "country": {
                  "type": "string",
                  "example": "UK"
                },
                "story": {
                  "type": "string",
                  "example": "My story..."
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully updated",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Successfully updated."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Invalid request or nothing to update.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Nothing to update."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Internal server error"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "JWT_authentication": []
          }
        ]
      }
    },
    "/api/v1/users/custom_user/{id}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update user password",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User Id"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "oldPassword": {
                  "example": "any"
                },
                "newPassword": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Successfully updated the password."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "...depends which error occurred..."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Internal server error"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "JWT_authentication": []
          }
        ]
      }
    },
    "/api/v1/users/custom_user/verify/{token}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Updates user status to \"active\", then redirects to success html page",
        "description": "This endpoint is not normally used by developers. This endpoint handles email verification when the user clicks on a link in their email. On success, the user is shown a web page with a success message. If the token has expired (15 min. time limit), the user is shown a web page with a message to return to the app to Resend email.",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "JWT token used to verify new users"
          }
        ],
        "responses": {
          "302": {
            "description": "If token is verified, redirects to success web page. If token has expired, redirects to expired web page."
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "...depends which error occured..."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "...depends which error occured..."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/v1/users/custom_user/verify/resend": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Sends another verification email",
        "description": "This endpoint is used to send another verification email, in case the original email did not make it.",
        "parameters": [
          {
            "name": "Request body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example": "john@email.com"
                }
              },
              "required": [
                "email"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Successfully sent another verification email."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "...depends which error occured..."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "An error occured when trying to get the user from the database."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/v1/users/user_actions/{id}": {
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes a user by id",
        "description": "This performs a soft delete. It does not actually delete the user from the database. Instead, it sets the user status to 'deleted'. Also, the user email is set to 'deleted_user_at_${getTIMESTAMPTZ()}' (Example: deleted_user_at_2023-05-29 20:33:16.331000-07). This is done because we need to get rid of the email address, but it cannot be null, so we set it to something that is useful that also will not show up when searching a user by email.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The id of the user to be deleted.",
            "schema": {
              "type": "object",
              "properties": {
                "password": {
                  "type": "string",
                  "example": "bad12345"
                }
              },
              "required": [
                "password"
              ]
            }
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "password": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Successfully deleted the user."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "...depends which error occured..."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "...depends which error occured..."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Access denied. You can only access your own records. Charity organizations can access their recipients records. This error can also happen if a user id for the requested resource was not found."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "...depends which error occured..."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "JWT_authentication": []
          }
        ]
      }
    },
    "/api/v1/users/user_actions/picture/{id}": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Upload or update picture",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User Id."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "image",
            "description": "Image to upload or update.",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Successfully uploaded or updated picture."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "...depends which error occured..."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Internal server error"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "JWT_authentication": []
          }
        ]
      }
    },
    "/api/v1/users/user_actions/reset-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "description": "",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "example": "any"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/charity/": {
      "post": {
        "tags": [
          "Charity"
        ],
        "summary": "Creates new charity",
        "description": "Create charity. All parameters need to be filled, user_id_admin needs to be the ID of the user who is creating the charity.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "Request body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Unify Giving"
                },
                "description": {
                  "type": "string",
                  "example": "Donation to homeless ...."
                },
                "address": {
                  "type": "string",
                  "example": "20 London Road"
                },
                "city": {
                  "type": "string",
                  "example": "London"
                },
                "country": {
                  "type": "string",
                  "example": "London"
                },
                "postal_code": {
                  "type": "string",
                  "example": "W1J 0DW"
                },
                "contact": {
                  "type": "string",
                  "example": "+441234567899"
                },
                "social_link": {
                  "type": "string",
                  "example": "https://www.instagram.com"
                },
                "user_id_admin": {
                  "type": "number",
                  "example": 123
                }
              },
              "required": [
                "name",
                "description",
                "address",
                "city",
                "country",
                "postal_code",
                "contact",
                "social_link",
                "user_id_admin"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Successfully saved new charity."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "...depends which error occured..."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "An error occured while saving the user to the database."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Charity"
        ],
        "summary": "Get all charity",
        "description": "To get all charities from DB",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully obtained.",
            "schema": {
              "type": "object",
              "properties": {
                "charity": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "example": 4
                      },
                      "name": {
                        "type": "string",
                        "example": "Barnabus"
                      },
                      "description": {
                        "type": "string",
                        "example": "A charity which started off with one man walking the streets and giving food to those in need now supports 600 people every week, has been bringing hope to the homeless for the last 25 years. The team at Barnabus have received the unsung heroes Queens Award for Voluntary Service and rely entirely on donations."
                      },
                      "address": {
                        "type": "string",
                        "example": "61 Bloom Street"
                      },
                      "city": {
                        "type": "string",
                        "example": "Manchester"
                      },
                      "contry": {
                        "type": "string",
                        "example": "Uk"
                      },
                      "postal_code": {
                        "type": "string",
                        "example": "M1 3LY"
                      },
                      "contact": {
                        "type": "string",
                        "example": "+44 0161 237 3223"
                      },
                      "social_link": {
                        "type": "string",
                        "example": "test"
                      },
                      "picture": {},
                      "user_id_admin": {
                        "type": "number",
                        "example": 8
                      },
                      "created_at": {
                        "type": "string",
                        "example": "2023-07-15T14:37:00.326Z"
                      },
                      "updated_at": {
                        "type": "string",
                        "example": "2023-07-15T14:37:00.326Z"
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Authorization header is undefined. Did you forget to add the authorization header to your request?"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Your session has expired. Please log in again."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "An error occured while searching the user profile on the database."
          }
        },
        "security": [
          {
            "JWT_authentication": []
          }
        ]
      }
    },
    "/api/v1/charity/{id}": {
      "get": {
        "tags": [
          "Charity"
        ],
        "summary": "Get charity by id",
        "description": "To get charity with the specified id from DB",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Charity successfully obtained.",
            "schema": {
              "type": "object",
              "properties": {
                "charity": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 4
                    },
                    "name": {
                      "type": "string",
                      "example": "Barnabus"
                    },
                    "description": {
                      "type": "string",
                      "example": "A charity which started off with one man walking the streets and giving food to those in need now supports 600 people every week, has been bringing hope to the homeless for the last 25 years. The team at Barnabus have received the unsung heroes Queens Award for Voluntary Service and rely entirely on donations."
                    },
                    "address": {
                      "type": "string",
                      "example": "61 Bloom Street"
                    },
                    "city": {
                      "type": "string",
                      "example": "Manchester"
                    },
                    "contry": {
                      "type": "string",
                      "example": "Uk"
                    },
                    "postal_code": {
                      "type": "string",
                      "example": "M1 3LY"
                    },
                    "contact": {
                      "type": "string",
                      "example": "+44 0161 237 3223"
                    },
                    "social_link": {
                      "type": "string",
                      "example": "test"
                    },
                    "picture": {},
                    "user_id_admin": {
                      "type": "number",
                      "example": 8
                    },
                    "created_at": {
                      "type": "string",
                      "example": "2023-07-15T14:37:00.326Z"
                    },
                    "updated_at": {
                      "type": "string",
                      "example": "2023-07-15T14:37:00.326Z"
                    },
                    "user_recipient": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 25
                          },
                          "email": {
                            "type": "string",
                            "example": "recipient9@email.com"
                          },
                          "first_name": {
                            "type": "string",
                            "example": "Jack"
                          },
                          "last_name": {
                            "type": "string",
                            "example": "Doe"
                          },
                          "password": {
                            "type": "string",
                            "example": "$2a$10$XtlPqJNkIZxrUUpaZv6Hf.Xs.NrRH.TTiF9Bj1Z4e.4kmfiGeez9K"
                          },
                          "agree_to_terms": {
                            "type": "boolean",
                            "example": true
                          },
                          "role": {
                            "type": "string",
                            "example": "recipient"
                          },
                          "status": {
                            "type": "string",
                            "example": "unverified"
                          },
                          "story": {},
                          "bio": {
                            "type": "string",
                            "example": ""
                          },
                          "picture": {},
                          "social_link": {},
                          "charity_id_admin": {},
                          "charity_id_recipient": {
                            "type": "number",
                            "example": 4
                          },
                          "created_at": {
                            "type": "string",
                            "example": "2023-07-18T21:49:55.143Z"
                          },
                          "updated_at": {
                            "type": "string",
                            "example": "2023-07-18T21:49:55.143Z"
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Authorization header is undefined. Did you forget to add the authorization header to your request?"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Your session has expired. Please log in again."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "An error occured while searching the charity profile on the database."
          }
        },
        "security": [
          {
            "JWT_authentication": []
          }
        ]
      },
      "put": {
        "tags": [
          "Charity"
        ],
        "summary": "Updates a Charity by Id",
        "description": "Updates a charity. Only provided parameters will be updated.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Charity ID"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "Request body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Unify Giving"
                },
                "description": {
                  "type": "string",
                  "example": "Donation to homeless ...."
                },
                "address": {
                  "type": "string",
                  "example": "20 London Road"
                },
                "city": {
                  "type": "string",
                  "example": "London"
                },
                "country": {
                  "type": "string",
                  "example": "UK"
                },
                "postal_code": {
                  "type": "string",
                  "example": "W1J 0DW"
                },
                "contact": {
                  "type": "string",
                  "example": "+441234567899"
                },
                "social_link": {
                  "type": "string",
                  "example": "https://www.instagram.com"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "JWT_authentication": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Charity"
        ],
        "summary": "Delete a charity by id",
        "description": "This performs a delete.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The id of the charity to be deleted."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Successfully deleted charity."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "...depends which error occured..."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "...depends which error occured..."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Access denied. You can only access your own records. This error can also happen if an address id for the requested resource was not found."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "...depends which error occured..."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "JWT_authentication": []
          }
        ]
      }
    },
    "/api/v1/charity/picture/{id}": {
      "post": {
        "tags": [
          "Charity"
        ],
        "summary": "Upload charity picture",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Charity Id."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "image",
            "description": "Image to upload.",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Successfully uploaded charity picture."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "...depends which error occured..."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Internal server error"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "JWT_authentication": []
          }
        ]
      },
      "put": {
        "tags": [
          "Charity"
        ],
        "summary": "Update charity picture",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Charity Id."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "image",
            "description": "Image to update.",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Successfully updated charity picture."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "...depends which error occured..."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Internal server error"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "JWT_authentication": []
          }
        ]
      }
    },
    "/api/v1/charity/location": {
      "post": {
        "tags": [
          "Charity"
        ],
        "summary": "Get all charities by location",
        "description": "To get all recipient users from DB by location",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "Request body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "location": {
                  "type": "string",
                  "example": "London, UK"
                }
              },
              "required": [
                "location"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Charities successfully obtained."
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Location is required."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "An error occurred while searching recipients on the database."
          }
        },
        "security": [
          {
            "JWT_authentication": []
          }
        ]
      }
    },
    "/api/v1/charity/recipient/picture/{id}": {
      "put": {
        "tags": [
          "Charity"
        ],
        "summary": "Upload or update picture",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User Id."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "image",
            "description": "Image to upload or update.",
            "in": "formData",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Successfully uploaded or updated picture."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "...depends which error occured..."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Internal server error"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "JWT_authentication": []
          }
        ]
      }
    },
    "/api/v1/donation/": {
      "post": {
        "tags": [
          "Donation"
        ],
        "summary": "Create new donation",
        "description": "Endpoint to create new donation by donor",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "Request body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "example": "object"
                },
                "properties": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "string"
                        }
                      }
                    },
                    "donor_id": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "integer"
                        }
                      }
                    },
                    "charity_id": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "integer"
                        }
                      }
                    },
                    "recipient_id": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "integer"
                        }
                      }
                    },
                    "amount_donation": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "number"
                        }
                      }
                    },
                    "customer_email": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "string"
                        },
                        "format": {
                          "type": "string",
                          "example": "email"
                        }
                      }
                    },
                    "currency": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "string"
                        }
                      }
                    },
                    "ios": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "example": "boolean"
                        }
                      }
                    }
                  }
                },
                "required": {
                  "type": "array",
                  "example": [
                    "donor_id",
                    "charity_id",
                    "recipient_id",
                    "amount_donation",
                    "customer_email",
                    "currency",
                    "ios"
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Ok."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "...depends on which error occurred..."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "An error occurred while saving the user to the database."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/v1/donation/impact": {
      "get": {
        "tags": [
          "Donation"
        ],
        "summary": "Get impact results",
        "description": "Endpoint to retrieve donation impact data, including the count of paid donations and unique recipients.",
        "responses": {
          "200": {
            "description": "Successfully retrieved donation impact data.",
            "schema": {
              "type": "object",
              "properties": {
                "ugTotalDonationsCount": {
                  "type": "number",
                  "example": 150
                },
                "UgTotalHelpedRecipientsCount": {
                  "type": "number",
                  "example": 25
                },
                "ugTotalDonationsAmount": {
                  "type": "number",
                  "example": 56170.23
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal server error occurred.",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "An error occurred while fetching the donation impact data."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/v1/donation/{id}": {
      "get": {
        "tags": [
          "Donation"
        ],
        "summary": "Get donation by id",
        "description": "To get donation by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "Donation Id."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Donation",
            "schema": {
              "type": "object",
              "properties": {
                "donation": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 2
                    },
                    "donor_id": {
                      "type": "number",
                      "example": 7
                    },
                    "charity_id": {
                      "type": "number",
                      "example": 4
                    },
                    "recipient_id": {
                      "type": "number",
                      "example": 25
                    },
                    "amount_donation": {
                      "type": "string",
                      "example": "2500"
                    },
                    "message": {
                      "type": "string",
                      "example": "message223366"
                    },
                    "created_at": {
                      "type": "string",
                      "example": "2023-07-28T21:47:49.094Z"
                    },
                    "updated_at": {
                      "type": "string",
                      "example": "2023-07-28T21:47:49.094Z"
                    },
                    "donor": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 7
                        },
                        "first_name": {
                          "type": "string",
                          "example": "Fake"
                        },
                        "last_name": {
                          "type": "string",
                          "example": "Donor"
                        }
                      }
                    },
                    "recipient": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 25
                        },
                        "first_name": {
                          "type": "string",
                          "example": "Jack"
                        },
                        "last_name": {
                          "type": "string",
                          "example": "Doe"
                        }
                      }
                    },
                    "charity": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "number",
                          "example": 4
                        },
                        "name": {
                          "type": "string",
                          "example": "Barnabus"
                        },
                        "description": {
                          "type": "string",
                          "example": "A charity which started off with one man walking the streets and giving food to those in need now supports 600 people every week, has been bringing hope to the homeless for the last 25 years. The team at Barnabus have received the unsung heroes Queens Award for Voluntary Service and rely entirely on donations."
                        },
                        "address": {
                          "type": "string",
                          "example": "61 Bloom Street"
                        },
                        "city": {
                          "type": "string",
                          "example": "Manchester"
                        },
                        "postal_code": {
                          "type": "string",
                          "example": "M1 3LY"
                        },
                        "contact": {
                          "type": "string",
                          "example": "+44 0161 237 3223"
                        },
                        "social_link": {
                          "type": "string",
                          "example": "test"
                        },
                        "picture": {},
                        "user_id_admin": {
                          "type": "number",
                          "example": 8
                        },
                        "created_at": {
                          "type": "string",
                          "example": "2023-07-15T14:37:00.326Z"
                        },
                        "updated_at": {
                          "type": "string",
                          "example": "2023-07-15T14:37:00.326Z"
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "JWT_authentication": []
          }
        ]
      }
    },
    "/api/v1/donation/donor/{id}": {
      "get": {
        "tags": [
          "Donation"
        ],
        "summary": "Get all donations given by a user",
        "description": "Retrieve all donations given by a user from the database, including aggregated metrics such as total donations amount, donation count, supported charities count, and donation distribution by city and country.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "description": "User ID."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved donor information and donation metrics.",
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 11
                    },
                    "email": {
                      "type": "string",
                      "example": "recipientTest@email.com"
                    },
                    "first_name": {
                      "type": "string",
                      "example": "John"
                    },
                    "last_name": {
                      "type": "string",
                      "example": "Doe"
                    },
                    "city": {
                      "type": "string",
                      "example": "London"
                    },
                    "country": {
                      "type": "string",
                      "example": "UK"
                    },
                    "picture": {
                      "type": "string",
                      "example": "null"
                    },
                    "qr_code": {
                      "type": "string",
                      "example": "null"
                    },
                    "donations_given": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 1
                          },
                          "donor_id": {
                            "type": "number",
                            "example": 9
                          },
                          "charity_id": {
                            "type": "number",
                            "example": 3
                          },
                          "recipient_id": {
                            "type": "number",
                            "example": 11
                          },
                          "amount_donation": {
                            "type": "string",
                            "example": "20"
                          },
                          "message": {
                            "type": "string",
                            "example": "string123456"
                          },
                          "created_at": {
                            "type": "string",
                            "example": "2023-07-28T22:39:06.225Z"
                          },
                          "updated_at": {
                            "type": "string",
                            "example": "2023-07-28T22:39:06.225Z"
                          },
                          "payment_id": {
                            "type": "number",
                            "example": 94
                          },
                          "recipient": {
                            "type": "object",
                            "properties": {
                              "first_name": {
                                "type": "string",
                                "example": "Felipe"
                              },
                              "last_name": {
                                "type": "string",
                                "example": "Gomes"
                              },
                              "picture": {},
                              "city": {
                                "type": "string",
                                "example": "Rio de Janeiro"
                              },
                              "country": {
                                "type": "string",
                                "example": "Brazil"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "donationsGivenSum": {
                  "type": "number",
                  "example": 20
                },
                "donationsGivenCount": {
                  "type": "number",
                  "example": 1
                },
                "supportCount": {
                  "type": "number",
                  "example": 1
                },
                "citiesAndCountries": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "city": {
                        "type": "string",
                        "example": "London"
                      },
                      "country": {
                        "type": "string",
                        "example": "UK"
                      },
                      "donationCount": {
                        "type": "number",
                        "example": 2
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "User not found in the database.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "User not found in database."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal server error occurred while retrieving user donations.",
            "schema": {
              "type": "object",
              "properties": {
                "error": {
                  "type": "string",
                  "example": "Internal server error"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "JWT_authentication": []
          }
        ]
      }
    },
    "/api/v1/donation/recipient/{id}": {
      "get": {
        "tags": [
          "Donation"
        ],
        "summary": "Get all donations received by a user",
        "description": "To get all donations received by a user from DB",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "User Id."
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Recipient successfully obtained.",
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 11
                    },
                    "email": {
                      "type": "string",
                      "example": "recipientTest@email.com"
                    },
                    "first_name": {
                      "type": "string",
                      "example": "John"
                    },
                    "last_name": {
                      "type": "string",
                      "example": "Doe"
                    },
                    "city": {
                      "type": "string",
                      "example": "London"
                    },
                    "country": {
                      "type": "string",
                      "example": "Uk"
                    },
                    "picture": {
                      "type": "string",
                      "example": "null"
                    },
                    "qr_code": {
                      "type": "string",
                      "example": "null"
                    },
                    "donations_received": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "number",
                            "example": 1
                          },
                          "donor_id": {
                            "type": "number",
                            "example": 9
                          },
                          "charity_id": {
                            "type": "number",
                            "example": 3
                          },
                          "recipient_id": {
                            "type": "number",
                            "example": 11
                          },
                          "amount_donation": {
                            "type": "string",
                            "example": "20"
                          },
                          "message": {
                            "type": "string",
                            "example": "string123456"
                          },
                          "created_at": {
                            "type": "string",
                            "example": "2023-07-28T22:39:06.225Z"
                          },
                          "updated_at": {
                            "type": "string",
                            "example": "2023-07-28T22:39:06.225Z"
                          },
                          "payment_id": {
                            "type": "number",
                            "example": 94
                          },
                          "donor": {
                            "type": "object",
                            "properties": {
                              "first_name": {
                                "type": "string",
                                "example": "Felipe"
                              },
                              "last_name": {
                                "type": "string",
                                "example": "Gomes"
                              },
                              "picture": {},
                              "city": {
                                "type": "string",
                                "example": "Rio de Janeiro"
                              },
                              "country": {
                                "type": "string",
                                "example": "Brazil"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "JWT_authentication": []
          }
        ]
      }
    },
    "/api/v1/webhook/": {
      "post": {
        "tags": [
          "Webhook"
        ],
        "description": "",
        "parameters": [
          {
            "name": "stripe-signature",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/v1/business/": {
      "post": {
        "tags": [
          "Business"
        ],
        "summary": "Creates new business",
        "description": "Create business. Only parameter product can be null, user_admin is the user role business.",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "Request body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Tesco"
                },
                "description": {
                  "type": "string",
                  "example": "Super Market ...."
                },
                "product": {
                  "type": "string",
                  "example": "Food"
                },
                "user_admin": {
                  "type": "number",
                  "example": 123
                },
                "category": {
                  "type": "string",
                  "example": "Grocery"
                },
                "address": {
                  "type": "string",
                  "example": "250 London Rd"
                },
                "post_code": {
                  "type": "string",
                  "example": "LW2 5RM"
                },
                "city": {
                  "type": "string",
                  "example": "London"
                },
                "country": {
                  "type": "string",
                  "example": "United Kingdom"
                }
              },
              "required": [
                "name",
                "description",
                "user_admin",
                "category",
                "address",
                "post_code",
                "city",
                "country"
              ]
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Successfully saved new business."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "...depends which error occured..."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "An error occured while saving the user to the database."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        }
      }
    },
    "/api/v1/business/find_recipient": {
      "post": {
        "tags": [
          "Business"
        ],
        "summary": "Get user by Qr Code",
        "description": "To get user(recipient) with the specified qr code from DB",
        "parameters": [
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User successfully obtained.",
            "schema": {
              "type": "object",
              "properties": {
                "user": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "number",
                      "example": 25
                    },
                    "first_name": {
                      "type": "string",
                      "example": "Jack"
                    },
                    "last_name": {
                      "type": "string",
                      "example": "Doe"
                    },
                    "picture": {
                      "type": "string",
                      "example": "image.png"
                    },
                    "city": {
                      "type": "string",
                      "example": "London"
                    },
                    "country": {
                      "type": "string",
                      "example": "Uk"
                    },
                    "balance": {
                      "type": "number",
                      "example": 450
                    }
                  }
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "JWT_authentication": []
          }
        ]
      }
    },
    "/api/v1/business/transaction/{id}": {
      "post": {
        "tags": [
          "Business"
        ],
        "summary": "Creates a new transaction (needs business id as a parameter)",
        "description": "Creates a new transaction between a user and a business. All parameters are required, id is the business id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "Request body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "qrcode": {
                  "type": "string",
                  "example": "123456"
                },
                "amount": {
                  "type": "number",
                  "example": 25.5
                },
                "products": {
                  "type": "string",
                  "example": "Cofee, Bread"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Transaction completed successfully."
                },
                "transaction_id": {
                  "type": "number",
                  "example": 15
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "recipient_id, business id, amount, and products are required."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "User or Business not found."
                }
              },
              "xml": {
                "name": "main"
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Error: <error_message>"
                }
              },
              "xml": {
                "name": "main"
              }
            }
          }
        },
        "security": [
          {
            "JWT_authentication": []
          }
        ]
      }
    }
  }
}